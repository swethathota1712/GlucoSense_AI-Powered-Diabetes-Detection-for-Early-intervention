import pandas as pd
import numpy as np
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import make_column_selector as selector
from xgboost import XGBClassifier
df=pd.read_csv(r"C:\Users\thefl\Documents\other zip folders\archive (1)\diabetes_prediction_dataset.csv")
df.info()
df.describe(include='all')
df.value_counts()

# Preprocessing Pipeline
cat_col=['gender','smoking_history']
num_col=['age','bmi','HbA1c_level','blood_glucose_level']
numeric_transformer = Pipeline(
    steps=[("imputer", SimpleImputer(strategy="median")),
           ("scaler", StandardScaler())]
)




categorical_transformer=Pipeline([
    ('imputer',SimpleImputer(strategy='most_frequent')),
    ('encoder',OneHotEncoder(handle_unknown='ignore'))
]
)

preprocessor=ColumnTransformer(
    transformers=[
        ('num',numeric_transformer,num_col),
        ('cat',categorical_transformer,cat_col)
    ],remainder='passthrough',force_int_remainder_cols=False
)
preprocessor
from sklearn.model_selection import train_test_split
from imblearn.over_sampling import SMOTE
X=df.drop(columns=['diabetes'])
Y=df['diabetes']
# spliting data
X_train, X_test, y_train, y_test =train_test_split(X,Y,random_state=42)
print(len(X_train),len(X_test))
X_test
X_train_transformed=preprocessor.fit_transform(X_train)
X_test_transformed=preprocessor.transform(X_test)


smote=SMOTE(random_state=42)
X_train_res,y_train_res=smote.fit_resample(X_train_transformed,y_train)
class_counts=df['diabetes'].value_counts()
print(class_counts)

majority_class=class_counts[0]
minority_class=class_counts[1]
ratio=majority_class/minority_class
print(f"Class Ratio(Majority:Minority):{ratio:.2f}:1")
clf=Pipeline(
    steps=[('preprocessor',preprocessor),
          ('Classifier',XGBClassifier(scale_pos_weight=ratio, eval_metric='logloss'))]
)
clf.fit(X_train,y_train)
from joblib import dump

dump(clf,"Pipline_clf.joblib")


prediction=clf.predict(X_test)
from sklearn.metrics import recall_score
print(recall_score(y_test,prediction))
from sklearn.metrics import confusion_matrix
from sklearn.metrics import ConfusionMatrixDisplay
from sklearn.metrics import classification_report
from sklearn.metrics import precision_score
import matplotlib.pyplot as plt
from sklearn.metrics import recall_score

print(classification_report(y_test,prediction))
print(f"recall_score:{round(recall_score(y_test,prediction)*100)}")

cm=confusion_matrix(y_test,prediction,labels=clf.classes_)
disp=ConfusionMatrixDisplay(confusion_matrix=cm,
                           display_labels=clf.classes_)
disp.plot()
plt.show()
param_grid = {
    'learning_rate': [0.01, 0.1, 0.2],   
    'max_depth': [3, 5, 7],                
    'subsample': [0.8, 1.0],               
    'colsample_bytree': [0.8, 1.0],         
    'gamma': [0, 0.1, 0.2],                
    'scale_pos_weight': [10.76, 15],       
    'n_estimators': [100, 200]              
}
from sklearn.model_selection import StratifiedKFold
from sklearn.model_selection import GridSearchCV
cv=StratifiedKFold(n_splits=5,shuffle=True,random_state=42)
model = XGBClassifier(
    objective='binary:logistic',
    eval_metric='logloss',  # Use 'aucpr' for AUC-PR
    random_state=42,
    device='gpu'
)
grid_search=GridSearchCV(
    estimator=model,
    param_grid=param_grid,
    scoring='recall',
    cv=cv,
    n_jobs=-1,
    verbose=1
)
grid_search.fit(X_train_res,y_train_res)
best_model=grid_search.best_estimator_
best_params=grid_search.best_params_
best_score=grid_search.best_score_

best_score
best_params
params = {
    'colsample_bytree': 0.8,
    'gamma': 0,
    'learning_rate': 0.01,
    'max_depth': 3,
    'n_estimators': 100,
    'scale_pos_weight': 10.76,
    'subsample': 0.8
}
from joblib import load
pretrained=load('Pipline_clf.joblib')
prediction=pretrained.predict(X_test)
prediction
non_diabetes_sample=df.iloc[1,:]
diabetes_df=diabetes_df.drop(columns=['diabetes'])
diabetes_df=df.loc[df['diabetes']==1]
diabetes_df
sample_df=df.iloc[1,:]
sample_df
